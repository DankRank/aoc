#!/usr/bin/env lua5.2
os.execute("test -d .git && mkdir -p tmp")
local success_mark =  "[\xe2\x9c\x93]"
local fail_mark = "[\xe2\x9c\x97]"
if os.execute("test -t 1") then
	success_mark =  "\r\x1b[25C[\x1b[1;32m\xe2\x9c\x93\x1b[m]"
	fail_mark = "\r\x1b[25C[\x1b[1;31m\xe2\x9c\x97\x1b[m]"
end
local function makeid(year, day, part)
	return ("%d/%02d/part%d"):format(year, day, part)
end
local answers = {}
local doubletest = {}
local function iterday(year, from, to)
	to = to or from or 25
	from = from or 1
	return coroutine.wrap(function()
		for day = from, to do
			coroutine.yield(year, day, 1)
			if day ~= 25 then
				coroutine.yield(year, day, 2)
			end
		end
		coroutine.yield(nil)
	end)
end
local function iterall()
	return coroutine.wrap(function()
		for year = 2015, 2023 do
			for day = 1, 24 do
				coroutine.yield(year, day, 1)
				coroutine.yield(year, day, 2)
			end
			coroutine.yield(year, 25, 1)
		end
		coroutine.yield(nil)
	end)
end
local function iterpart(year, day, part)
	return coroutine.wrap(function()
		coroutine.yield(year, day, part)
		coroutine.yield(nil)
	end)
end
local buildcmds = {
}
local function initbuildcmds()
	local CC = "gcc -O2"
	local CXX = "g++ -std=c++20 -O2"
	local PYTHON = "python3"
	local PYPY = "pypy3"
	local function cbuild(year, day, part)
		local exe = ("../../tmp/%d_%02d_%d"):format(year, day, part)
		return ("%s part%d.c -o %s && %s <input.txt"):format(CC, part, exe, exe)
	end
	local function cbuild_libcrypto(year, day, part)
		-- needs libssl-dev
		local exe = ("../../tmp/%d_%02d_%d"):format(year, day, part)
		return ("%s part%d.c -lcrypto -o %s && %s"):format(CC, part, exe, exe)
	end
	local function cat(year, day, part)
		return ("cat part%d.txt"):format(part)
	end
	local function sh(year, day, part)
		return ("./part%d.sh"):format(part)
	end
	local function cbuild_bison(year, day, part)
		local exe = ("../../tmp/%d_%02d_%d"):format(year, day, part)
		return ("bison part%d.y -o %s.tab.c && %s %s.tab.c -o %s && %s <input.txt"):format(part, exe, CC, exe, exe, exe)
	end
	local function cbuild_btyacc(year, day, part)
		local exe = ("../../tmp/%d_%02d_%d"):format(year, day, part)
		-- yacc from https://invisible-island.net/byacc/ compiled with --enable-btyacc
		-- the other btyacc also works, but it doesn't have the -o option
		local btyacc = "../../tmp/yacc -B"
		return ("%s part%d.y -o %s.tab.c && %s %s.tab.c -o %s && %s <input.txt"):format(btyacc, part, exe, CC, exe, exe, exe)
	end
	local function day2020_20(year, day, part)
		if part == 1 then
			return "./mulcorners.sh"
		else
			return ("%s find.py <stitched.txt"):format(PYTHON)
		end
	end
	local function python(year, day, part)
		return ("%s part%d.py <input.txt"):format(PYTHON, part)
	end
	local function pypy(year, day, part)
		return ("%s part%d.py <input.txt"):format(PYPY, part)
	end
	local function cxxbuild(year, day, part)
		local exe = ("../../tmp/%d_%02d_%d"):format(year, day, part)
		return ("%s part%d.cc -o %s && %s <input.txt"):format(CXX, part, exe, exe)
	end
	local function applyrule(iter, f)
		for year, day, part in iter do
			buildcmds[makeid(year, day, part)] = ("export PYTHONPYCACHEPREFIX=$(pwd)/tmp; cd %d/%02d; "):format(year, day)..f(year, day, part)
		end
	end
	applyrule(iterday(2015, 1, 12), cbuild)
	applyrule(iterday(2015, 4), cbuild_libcrypto)
	applyrule(iterpart(2015, 7, 2), sh)
	applyrule(iterpart(2015, 12, 2), sh) -- uses jq
	applyrule(iterday(2015, 11), cat)
	applyrule(iterday(2015, 13, 25), python)
	applyrule(iterday(2016), python)
	applyrule(iterday(2019), python)
	applyrule(iterday(2020), cbuild)
	applyrule(iterday(2020, 18), cbuild_bison)
	applyrule(iterday(2020, 19), cbuild_btyacc)
	applyrule(iterday(2020, 20), day2020_20)
	applyrule(iterday(2020, 21), python)
	applyrule(iterday(2020, 22), python)
	applyrule(iterpart(2020, 23, 1), python)
	applyrule(iterday(2020, 24), cbuild_bison)
	applyrule(iterday(2021), python)
	applyrule(iterday(2022), python)
	applyrule(iterpart(2022, 15, 2), pypy)
	applyrule(iterday(2022, 19), cxxbuild) -- takes 5 mins and lots of RAM
	applyrule(iterday(2023), python)
	applyrule(iterpart(2023, 23, 2), pypy)
end
initbuildcmds()
local function runcheck(cmd, answer)
	local file = io.popen(cmd, "r")
	local result = file:read("*a")
	local exit = {file:close()}
	if not exit[1] then
		print((fail_mark.." failed to finish (%s %d)"):format(exit[2], exit[3]))
	elseif answer.."\n" == result then
		print(success_mark)
	else
		print((fail_mark.." expected {%s} got {%s}"):format(answer, result:sub(1, -2)))
	end
end
local function rundoubletest(year, day)
	local id1 = makeid(year, day, 1)
	local id2 = makeid(year, day, 2)
	local answer1 = answers[id1]
	local answer2 = answers[id2]
	if not answer1 or not answer2 then
		return
	end
	local answer = answer1.."\n"..answer2
	io.write(("testing %s...       "):format(id1:sub(1,7)))
	local cmd = buildcmds[id1]
	if not cmd then
		print(fail_mark.." not implemented")
		return
	end
	runcheck(cmd, answer)
end
local function runtest(year, day, part)
	local id = makeid(year, day, part)
	if doubletest[id:sub(1,7)] then
		if part == 1 then
			rundoubletest(year, day)
		end
		return
	end
	local answer = answers[id]
	if not answer then
		return
	end
	io.write(("testing %s... "):format(id))
	local cmd = buildcmds[id]
	if not cmd then
		print(fail_mark.." not implemented")
		return
	end
	runcheck(cmd, answer)
end
local CURRENT_YEAR = 2023
local args = {...}
if args[1] == "testyear" then
	answers = dofile "answers.lua"
	doubletest = dofile "doubletest.lua"
	args[2] = args[2] and tonumber(args[2])
	args[3] = args[3] and tonumber(args[3])
	args[4] = args[4] and tonumber(args[4])
	for year, day, part in iterday(table.unpack(args, 2, 4)) do
		runtest(year, day, part)
	end
elseif args[1] == "testall" then
	answers = dofile "answers.lua"
	doubletest = dofile "doubletest.lua"
	for year, day, part in iterall() do
		runtest(year, day, part)
	end
elseif args[1] == "testocr" then
	answers = dofile "answers.lua"
	doubletest = dofile "doubletest.lua"
	runtest(2016, 8, 2)
	runtest(2019, 8, 2)
	runtest(2019, 11, 2)
	runtest(2021, 13, 2)
	runtest(2022, 10, 2)
elseif args[1] == "iterall" then
	for year, day, part in iterall() do
		print(year, day, part)
	end
elseif args[1] == "input" then
	local year = args[3] and args[2] or CURRENT_YEAR
	local day = args[3] or args[2] or error("no year specified")
	os.execute(("curl -b ~/aoc/.git/cookies.txt -fSs https://adventofcode.com/%d/day/%d/input"):format(year, day))
elseif args[1] == "buildyacc" then
	os.execute([[
		V=20221106
		cd tmp || exit 1
		[ -f byacc-$V.tgz ] || curl -LSso byacc-$V.tgz https://invisible-island.net/archives/byacc/byacc-$V.tgz
		tar -xzf byacc-$V.tgz
		cd byacc-$V || exit 1
		rm -rf build
		mkdir build
		cd build || exit 1
		../configure --enable-btyacc && make -j
		ln -sf byacc-$V/build/yacc ../../yacc
	]])
elseif args[1] == "newpy" then
	os.execute([[
		[ -f part1.py ] || {
			{
			echo '#!/usr/bin/env python3'
			echo 'try:'
			echo '    while True:'
			echo '        input()'
			echo 'except EOFError:'
			echo '    pass'
			} > part1.py
			chmod +x part1.py
		}
		[ -f part2.py ] || {
			touch part2.py
			chmod +x part2.py
		}
	]])
elseif args[1] == "copysolve" then
	os.execute([[
		(
			echo '```py'
			cat part1.py
			echo '```'
			[ -f part2.py ] && {
				echo '```py'
				cat part2.py
				echo '```'
			}
		) | xclip -i -r -selection clipboard
	]])
else
	io.stderr:write("no such command\n")
end
